# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.user import User  # noqa: F401,E501
from swagger_server.models.user_details import UserDetails  # noqa: F401,E501
from swagger_server import util


class AllOfuserIdBodyPatch(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, pesel: str = None, driver_licence_number: str = None, driver_licence_expiration_date: str = None,
                 last_rental: int = None, last_reservation: int = None, role: str = None, login: str = None,
                 email: str = None, name: str = None, surname: str = None, account_type: str = None, status: str = None,
                 balance: str = None):  # noqa: E501
        """AllOfuserIdBodyPatch - a model defined in Swagger

        :param pesel: The pesel of this AllOfuserIdBodyPatch.  # noqa: E501
        :type pesel: str
        :param driver_licence_number: The driver_licence_number of this AllOfuserIdBodyPatch.  # noqa: E501
        :type driver_licence_number: str
        :param driver_licence_expiration_date: The driver_licence_expiration_date of this AllOfuserIdBodyPatch.  # noqa: E501
        :type driver_licence_expiration_date: str
        :param last_rental: The last_rental of this AllOfuserIdBodyPatch.  # noqa: E501
        :type last_rental: int
        :param last_reservation: The last_reservation of this AllOfuserIdBodyPatch.  # noqa: E501
        :type last_reservation: int
        :param role: The role of this AllOfuserIdBodyPatch.  # noqa: E501
        :type role: str
        :param login: The login of this AllOfuserIdBodyPatch.  # noqa: E501
        :type login: str
        :param email: The email of this AllOfuserIdBodyPatch.  # noqa: E501
        :type email: str
        :param name: The name of this AllOfuserIdBodyPatch.  # noqa: E501
        :type name: str
        :param surname: The surname of this AllOfuserIdBodyPatch.  # noqa: E501
        :type surname: str
        :param account_type: The account_type of this AllOfuserIdBodyPatch.  # noqa: E501
        :type account_type: str
        :param status: The status of this AllOfuserIdBodyPatch.  # noqa: E501
        :type status: str
        :param balance: The balance of this AllOfuserIdBodyPatch.  # noqa: E501
        :type balance: str
        """
        self.swagger_types = {
            'pesel': str,
            'driver_licence_number': str,
            'driver_licence_expiration_date': str,
            'last_rental': int,
            'last_reservation': int,
            'role': str,
            'login': str,
            'email': str,
            'name': str,
            'surname': str,
            'account_type': str,
            'status': str,
            'balance': str
        }

        self.attribute_map = {
            'pesel': 'pesel',
            'driver_licence_number': 'driverLicenceNumber',
            'driver_licence_expiration_date': 'driverLicenceExpirationDate',
            'last_rental': 'lastRental',
            'last_reservation': 'lastReservation',
            'role': 'role',
            'login': 'login',
            'email': 'email',
            'name': 'name',
            'surname': 'surname',
            'account_type': 'accountType',
            'status': 'status',
            'balance': 'balance'
        }
        self._pesel = pesel
        self._driver_licence_number = driver_licence_number
        self._driver_licence_expiration_date = driver_licence_expiration_date
        self._last_rental = last_rental
        self._last_reservation = last_reservation
        self._role = role
        self._login = login
        self._email = email
        self._name = name
        self._surname = surname
        self._account_type = account_type
        self._status = status
        self._balance = balance

    @classmethod
    def from_dict(cls, dikt) -> 'AllOfuserIdBodyPatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AllOfuser_id_bodyPatch of this AllOfuserIdBodyPatch.  # noqa: E501
        :rtype: AllOfuserIdBodyPatch
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pesel(self) -> str:
        """Gets the pesel of this AllOfuserIdBodyPatch.

        Pesel uzytkownika  # noqa: E501

        :return: The pesel of this AllOfuserIdBodyPatch.
        :rtype: str
        """
        return self._pesel

    @pesel.setter
    def pesel(self, pesel: str):
        """Sets the pesel of this AllOfuserIdBodyPatch.

        Pesel uzytkownika  # noqa: E501

        :param pesel: The pesel of this AllOfuserIdBodyPatch.
        :type pesel: str
        """

        self._pesel = pesel

    @property
    def driver_licence_number(self) -> str:
        """Gets the driver_licence_number of this AllOfuserIdBodyPatch.

        Numer prawa jazdy  # noqa: E501

        :return: The driver_licence_number of this AllOfuserIdBodyPatch.
        :rtype: str
        """
        return self._driver_licence_number

    @driver_licence_number.setter
    def driver_licence_number(self, driver_licence_number: str):
        """Sets the driver_licence_number of this AllOfuserIdBodyPatch.

        Numer prawa jazdy  # noqa: E501

        :param driver_licence_number: The driver_licence_number of this AllOfuserIdBodyPatch.
        :type driver_licence_number: str
        """

        self._driver_licence_number = driver_licence_number

    @property
    def driver_licence_expiration_date(self) -> str:
        """Gets the driver_licence_expiration_date of this AllOfuserIdBodyPatch.

        Data waznosci licencji  # noqa: E501

        :return: The driver_licence_expiration_date of this AllOfuserIdBodyPatch.
        :rtype: str
        """
        return self._driver_licence_expiration_date

    @driver_licence_expiration_date.setter
    def driver_licence_expiration_date(self, driver_licence_expiration_date: str):
        """Sets the driver_licence_expiration_date of this AllOfuserIdBodyPatch.

        Data waznosci licencji  # noqa: E501

        :param driver_licence_expiration_date: The driver_licence_expiration_date of this AllOfuserIdBodyPatch.
        :type driver_licence_expiration_date: str
        """

        self._driver_licence_expiration_date = driver_licence_expiration_date

    @property
    def last_rental(self) -> int:
        """Gets the last_rental of this AllOfuserIdBodyPatch.

        Ostatni wynajem (moze byc aktualnie)  # noqa: E501

        :return: The last_rental of this AllOfuserIdBodyPatch.
        :rtype: int
        """
        return self._last_rental

    @last_rental.setter
    def last_rental(self, last_rental: int):
        """Sets the last_rental of this AllOfuserIdBodyPatch.

        Ostatni wynajem (moze byc aktualnie)  # noqa: E501

        :param last_rental: The last_rental of this AllOfuserIdBodyPatch.
        :type last_rental: int
        """

        self._last_rental = last_rental

    @property
    def last_reservation(self) -> int:
        """Gets the last_reservation of this AllOfuserIdBodyPatch.

        Ostatnia rezerwacja  # noqa: E501

        :return: The last_reservation of this AllOfuserIdBodyPatch.
        :rtype: int
        """
        return self._last_reservation

    @last_reservation.setter
    def last_reservation(self, last_reservation: int):
        """Sets the last_reservation of this AllOfuserIdBodyPatch.

        Ostatnia rezerwacja  # noqa: E501

        :param last_reservation: The last_reservation of this AllOfuserIdBodyPatch.
        :type last_reservation: int
        """

        self._last_reservation = last_reservation

    @property
    def role(self) -> str:
        """Gets the role of this AllOfuserIdBodyPatch.

        Rola w systemie. Null jezeli brak roli, ADMIN, SERVICE  # noqa: E501

        :return: The role of this AllOfuserIdBodyPatch.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this AllOfuserIdBodyPatch.

        Rola w systemie. Null jezeli brak roli, ADMIN, SERVICE  # noqa: E501

        :param role: The role of this AllOfuserIdBodyPatch.
        :type role: str
        """

        self._role = role

    @property
    def login(self) -> str:
        """Gets the login of this AllOfuserIdBodyPatch.

        Login uzytkownika  # noqa: E501

        :return: The login of this AllOfuserIdBodyPatch.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login: str):
        """Sets the login of this AllOfuserIdBodyPatch.

        Login uzytkownika  # noqa: E501

        :param login: The login of this AllOfuserIdBodyPatch.
        :type login: str
        """

        self._login = login

    @property
    def email(self) -> str:
        """Gets the email of this AllOfuserIdBodyPatch.

        Email uzytkownika  # noqa: E501

        :return: The email of this AllOfuserIdBodyPatch.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this AllOfuserIdBodyPatch.

        Email uzytkownika  # noqa: E501

        :param email: The email of this AllOfuserIdBodyPatch.
        :type email: str
        """

        self._email = email

    @property
    def name(self) -> str:
        """Gets the name of this AllOfuserIdBodyPatch.

        Imie  # noqa: E501

        :return: The name of this AllOfuserIdBodyPatch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this AllOfuserIdBodyPatch.

        Imie  # noqa: E501

        :param name: The name of this AllOfuserIdBodyPatch.
        :type name: str
        """

        self._name = name

    @property
    def surname(self) -> str:
        """Gets the surname of this AllOfuserIdBodyPatch.

        Nazwisko  # noqa: E501

        :return: The surname of this AllOfuserIdBodyPatch.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname: str):
        """Sets the surname of this AllOfuserIdBodyPatch.

        Nazwisko  # noqa: E501

        :param surname: The surname of this AllOfuserIdBodyPatch.
        :type surname: str
        """

        self._surname = surname

    @property
    def account_type(self) -> str:
        """Gets the account_type of this AllOfuserIdBodyPatch.

        PERSONAL - osoba prywatna, COMPANY - firma, ORGANISATION - organizacja, UNKNOWN - Inne  # noqa: E501

        :return: The account_type of this AllOfuserIdBodyPatch.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type: str):
        """Sets the account_type of this AllOfuserIdBodyPatch.

        PERSONAL - osoba prywatna, COMPANY - firma, ORGANISATION - organizacja, UNKNOWN - Inne  # noqa: E501

        :param account_type: The account_type of this AllOfuserIdBodyPatch.
        :type account_type: str
        """

        self._account_type = account_type

    @property
    def status(self) -> str:
        """Gets the status of this AllOfuserIdBodyPatch.

        ACTIVE - Aktywne konto, INACTIVE - nieaktwyne konto, DOCUMENTS - Brak dokumentow, PENDING - wyslano dokumenty, oczekiwanie na potwierdzenie, PAYMENT - Brak srodkow na koncie, LOCKED - konto zablokowane, DELETED - konto usuniete  # noqa: E501

        :return: The status of this AllOfuserIdBodyPatch.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this AllOfuserIdBodyPatch.

        ACTIVE - Aktywne konto, INACTIVE - nieaktwyne konto, DOCUMENTS - Brak dokumentow, PENDING - wyslano dokumenty, oczekiwanie na potwierdzenie, PAYMENT - Brak srodkow na koncie, LOCKED - konto zablokowane, DELETED - konto usuniete  # noqa: E501

        :param status: The status of this AllOfuserIdBodyPatch.
        :type status: str
        """

        self._status = status

    @property
    def balance(self) -> str:
        """Gets the balance of this AllOfuserIdBodyPatch.

        stan konta w PLN.GR  # noqa: E501

        :return: The balance of this AllOfuserIdBodyPatch.
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance: str):
        """Sets the balance of this AllOfuserIdBodyPatch.

        stan konta w PLN.GR  # noqa: E501

        :param balance: The balance of this AllOfuserIdBodyPatch.
        :type balance: str
        """

        self._balance = balance
