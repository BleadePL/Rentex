# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RegisterData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str = None, surname: str = None, plec: str = None, login: str = None, password: str = None,
                 address: str = None, email: str = None, pesel: str = None):  # noqa: E501
        """RegisterData - a model defined in Swagger

        :param name: The name of this RegisterData.  # noqa: E501
        :type name: str
        :param surname: The surname of this RegisterData.  # noqa: E501
        :type surname: str
        :param plec: The plec of this RegisterData.  # noqa: E501
        :type plec: str
        :param login: The login of this RegisterData.  # noqa: E501
        :type login: str
        :param password: The password of this RegisterData.  # noqa: E501
        :type password: str
        :param address: The address of this RegisterData.  # noqa: E501
        :type address: str
        :param email: The email of this RegisterData.  # noqa: E501
        :type email: str
        :param pesel: The pesel of this RegisterData.  # noqa: E501
        :type pesel: str
        """
        self.swagger_types = {
            'name': str,
            'surname': str,
            'plec': str,
            'login': str,
            'password': str,
            'address': str,
            'email': str,
            'pesel': str
        }

        self.attribute_map = {
            'name': 'name',
            'surname': 'surname',
            'plec': 'plec',
            'login': 'login',
            'password': 'password',
            'address': 'address',
            'email': 'email',
            'pesel': 'pesel'
        }
        self._name = name
        self._surname = surname
        self._plec = plec
        self._login = login
        self._password = password
        self._address = address
        self._email = email
        self._pesel = pesel

    @classmethod
    def from_dict(cls, dikt) -> 'RegisterData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RegisterData of this RegisterData.  # noqa: E501
        :rtype: RegisterData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this RegisterData.

        All names of the person  # noqa: E501

        :return: The name of this RegisterData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this RegisterData.

        All names of the person  # noqa: E501

        :param name: The name of this RegisterData.
        :type name: str
        """

        self._name = name

    @property
    def surname(self) -> str:
        """Gets the surname of this RegisterData.


        :return: The surname of this RegisterData.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname: str):
        """Sets the surname of this RegisterData.


        :param surname: The surname of this RegisterData.
        :type surname: str
        """

        self._surname = surname

    @property
    def plec(self) -> str:
        """Gets the plec of this RegisterData.

        M(ale) or F(emale) or O(ther)  # noqa: E501

        :return: The plec of this RegisterData.
        :rtype: str
        """
        return self._plec

    @plec.setter
    def plec(self, plec: str):
        """Sets the plec of this RegisterData.

        M(ale) or F(emale) or O(ther)  # noqa: E501

        :param plec: The plec of this RegisterData.
        :type plec: str
        """

        self._plec = plec

    @property
    def login(self) -> str:
        """Gets the login of this RegisterData.


        :return: The login of this RegisterData.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login: str):
        """Sets the login of this RegisterData.


        :param login: The login of this RegisterData.
        :type login: str
        """

        self._login = login

    @property
    def password(self) -> str:
        """Gets the password of this RegisterData.


        :return: The password of this RegisterData.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this RegisterData.


        :param password: The password of this RegisterData.
        :type password: str
        """

        self._password = password

    @property
    def address(self) -> str:
        """Gets the address of this RegisterData.

        Adres w formacie NrDomuIMieszkania;ulica;kodpocztowy;miasto;kraj  # noqa: E501

        :return: The address of this RegisterData.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this RegisterData.

        Adres w formacie NrDomuIMieszkania;ulica;kodpocztowy;miasto;kraj  # noqa: E501

        :param address: The address of this RegisterData.
        :type address: str
        """

        self._address = address

    @property
    def email(self) -> str:
        """Gets the email of this RegisterData.


        :return: The email of this RegisterData.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this RegisterData.


        :param email: The email of this RegisterData.
        :type email: str
        """

        self._email = email

    @property
    def pesel(self) -> str:
        """Gets the pesel of this RegisterData.

        Pesel  # noqa: E501

        :return: The pesel of this RegisterData.
        :rtype: str
        """
        return self._pesel

    @pesel.setter
    def pesel(self, pesel: str):
        """Sets the pesel of this RegisterData.

        Pesel  # noqa: E501

        :param pesel: The pesel of this RegisterData.
        :type pesel: str
        """

        self._pesel = pesel
